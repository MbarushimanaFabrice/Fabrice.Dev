{
  "version": 3,
  "sources": ["../../@sl-codeblaster/react-3d-animated-card/src/AnimatedCard/AnimatedCard.tsx"],
  "sourcesContent": ["import React from 'react'\n// @ts-ignore\nimport styles from './AnimatedCard.module.scss'\n\nclass AnimatedCard extends React.Component<AnimatedCardProps, AnimatedCardState> {\n\n  private card: any = null\n  private figureIcon: any = null\n  private title: any = null\n  private body: any = null\n  private button: any = null\n\n  constructor(props: AnimatedCardProps) {\n    super(props)\n    this.state = {\n      mainClass: ''\n    }\n  }\n\n  componentDidMount() {\n    this.card = document.querySelector(`.${styles.cardDefault}`)\n    this.figureIcon = document.querySelector(`.${styles.cardDefault} .figure img`)\n    this.title = document.querySelector(`.${styles.cardDefault} .content .title`)\n    this.body = document.querySelector(`.${styles.cardDefault} .content .body`)\n    this.button = document.querySelector(`.${styles.cardDefault} .footer .footer_btn`)\n\n    React.Children.forEach(this.props.children, element => {\n      if (!React.isValidElement(element)) return\n\n      this.setState({ mainClass: element.props.className })\n\n    })\n\n  }\n\n\n  _onMouseMove = (e: any) => {\n    let card = this.card;\n    const { config } = this.props;\n\n    let xAxis = (window.innerWidth / 2 - e.pageX) / (config?.rotation || 15);\n    let yAxis = (window.innerHeight / 2 - e.pageY) / (config?.rotation || 15);\n\n    card.style.transition = 'all 0.1s ease';\n    card.style.transform = `rotateY(${xAxis}deg) rotateX(${yAxis}deg)`;\n  }\n\n  _onMouseLeave = () => {\n    let card = this.card\n    const { config } = this.props\n\n    card.style.transition = `all ${config && config.transition?.duration || 0.5}s ease`;\n    card.style.transform = `rotateY(0deg) rotateX(0deg)`;\n\n    if (this.title) this.title.style.transform = 'translateZ(0px)';\n    if (this.body) this.body.style.transform = 'translateZ(0px)';\n    if (this.button) this.button.style.transform = 'translateZ(0px)';\n    if (this.figureIcon) this.figureIcon.style.transform = 'translateZ(0) rotateZ(0deg)';\n  }\n\n  _onMouseEnter = () => {\n    let card = this.card\n    const { config } = this.props\n\n    card.style.transition = `all ${config && config.transition?.duration || 0.5}s ease`;\n\n    if (this.title) this.title.style.transition = `all ${config && config.transition?.duration || 0.5}s ease`;\n    if (this.body) this.body.style.transition = `all ${config && config.transition?.duration || 0.5}s ease`;\n    if (this.button) this.button.style.transition = `all ${config && config.transition?.duration || 0.5}s ease`;\n    if (this.figureIcon) this.figureIcon.style.transition = `all ${config && config.transition?.duration || 0.5}s ease`;\n\n    if (this.title) this.title.style.transform = `translateZ(${config && config.transform?.titleTranslateZ || 140}px)`;\n    if (this.body) this.body.style.transform = `translateZ(${config && config.transform?.bodyTextTranslateZ || 125}px)`;\n    if (this.button) this.button.style.transform = `translateZ(${config && config.transform?.buttonTranslateZ || 100}px)`;\n    if (this.figureIcon) this.figureIcon.style.transform = `translateZ(${config && config.transform?.figureIcon?.translateZ || 160}px) rotateZ(${config && config.transform?.figureIcon?.rotation || 45}deg)`;\n  }\n\n  render() {\n    const { children, className, style } = this.props\n    const { mainClass } = this.state\n\n    return (\n      <div\n        className={[styles.container, className].join(' ')}\n        onMouseMove={this._onMouseMove}\n        onMouseLeave={this._onMouseLeave}\n        onMouseEnter={this._onMouseEnter}\n        {...{ style }}\n      >\n\n        {React.isValidElement(children) && React.cloneElement(children as React.ReactElement, { className: mainClass + ' ' + styles.cardDefault })}\n      </div>\n    )\n  }\n}\n\ninterface transitionProps {\n  duration: number;\n  timingMode?: 'ease' | 'ease-out' | 'ease-in' | 'ease-in-out';\n}\n\ninterface transformProps {\n  figureIcon?: {\n    rotation?: number;\n    translateZ?: number\n  },\n  titleTranslateZ?: number;\n  buttonTranslateZ?: number;\n  bodyTextTranslateZ?: number;\n}\n\ninterface ObjectProps {\n  transition?: transitionProps;\n  rotation?: number;\n  transform?: transformProps;\n}\n\ninterface AnimatedCardProps {\n  config?: ObjectProps;\n  className?: string;\n\n  [key: string]: any;\n}\n\ninterface AnimatedCardState {\n  mainClass: string;\n}\n\nexport default AnimatedCard\n"],
  "mappings": "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",
  "names": ["AnimatedCard", "props", "e", "card", "config", "xAxis", "window", "innerWidth", "pageX", "rotation", "yAxis", "innerHeight", "pageY", "style", "transition", "transform", "duration", "title", "body", "button", "figureIcon", "titleTranslateZ", "bodyTextTranslateZ", "buttonTranslateZ", "translateZ", "state", "mainClass", "componentDidMount", "document", "querySelector", "styles", "cardDefault", "React", "Children", "forEach", "children", "element", "isValidElement", "setState", "className", "render", "container", "join", "onMouseMove", "_onMouseMove", "onMouseLeave", "_onMouseLeave", "onMouseEnter", "_onMouseEnter", "cloneElement", "Component"]
}
